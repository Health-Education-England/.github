name: Deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      cluster-prefix:
        description: The ECS prefix of the cluster to target for deployment.
        required: true
        type: string
      environment:
        description: The environment to target for deployment.
        required: true
        type: string
      service-name:
        description: The name of the service being deployed, defaults to repository name.
        required: false
        default: ${{ github.event.repository.name }}
        type: string
    secrets:
      checkout-token:
        description: The token used for performing checkout.
        required: false

jobs :
  deploy:
    name: Deploy to ${{ inputs.cluster-prefix }} ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout for determining submodules
        uses: actions/checkout@v3

      - name: Determine Submodules
        id: check-submodules
        run: |
          if [ -f .gitmodules ]; then
            echo "submodule_checkout_strategy=recursive" >> $GITHUB_OUTPUT
          else
            echo "submodule_checkout_strategy=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: ${{ steps.check-submodules.outputs.submodule_checkout_strategy }}
          token: ${{ secrets.checkout-token ||  github.token }}

      - name: Create task definition
        run: sed -e 's/${environment}/${{ inputs.environment }}/g' -e 's/${service-name}/${{ inputs.service-name }}/g' .aws/task-definition-template.json > ${{ runner.temp }}/task-definition.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::430723991443:role/github-actions-deployer-role

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ runner.temp }}/task-definition.json
          container-name: ${{ inputs.service-name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster-prefix }}-${{ inputs.environment }}
          wait-for-service-stability: true

      - name: Verify ECS deployment
        run: |
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ inputs.cluster-prefix }}-${{ inputs.environment }} --service ${{ inputs.service-name }} --query services[0].deployments[0].taskDefinition | jq -r ".")
          NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
          echo "Current task arn: $CURRENT_TASK_DEF_ARN"
          echo "New task arn: $NEW_TASK_DEF_ARN"
          if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
            echo "Deployment failed."
            exit 1
          fi
